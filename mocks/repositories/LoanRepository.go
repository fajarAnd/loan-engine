// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/fajar-andriansyah/loan-engine/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: ctx, loanID, approvingEmployeeID, approvalNotes, agreementURL
func (_m *LoanRepository) ApproveLoan(ctx context.Context, loanID uuid.UUID, approvingEmployeeID uuid.UUID, approvalNotes string, agreementURL string) error {
	ret := _m.Called(ctx, loanID, approvingEmployeeID, approvalNotes, agreementURL)

	if len(ret) == 0 {
		panic("no return value specified for ApproveLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, loanID, approvingEmployeeID, approvalNotes, agreementURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoan provides a mock function with given fields: ctx, loan
func (_m *LoanRepository) CreateLoan(ctx context.Context, loan *models.Loan) error {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Loan) error); ok {
		r0 = rf(ctx, loan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisburseLoan provides a mock function with given fields: ctx, loanID, fieldOfficerID, signedAgreementURL, disbursementNotes
func (_m *LoanRepository) DisburseLoan(ctx context.Context, loanID uuid.UUID, fieldOfficerID uuid.UUID, signedAgreementURL string, disbursementNotes string) error {
	ret := _m.Called(ctx, loanID, fieldOfficerID, signedAgreementURL, disbursementNotes)

	if len(ret) == 0 {
		panic("no return value specified for DisburseLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, string) error); ok {
		r0 = rf(ctx, loanID, fieldOfficerID, signedAgreementURL, disbursementNotes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApprovedLoan provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) GetApprovedLoan(ctx context.Context, loanID uuid.UUID) (*models.ApproveLoanResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetApprovedLoan")
	}

	var r0 *models.ApproveLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ApproveLoanResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ApproveLoanResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ApproveLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisbursedLoan provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) GetDisbursedLoan(ctx context.Context, loanID uuid.UUID) (*models.DisburseLoanResponse, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetDisbursedLoan")
	}

	var r0 *models.DisburseLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.DisburseLoanResponse, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.DisburseLoanResponse); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DisburseLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanForApproval provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) GetLoanForApproval(ctx context.Context, loanID uuid.UUID) (*models.LoanForApproval, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanForApproval")
	}

	var r0 *models.LoanForApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.LoanForApproval, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.LoanForApproval); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoanForApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanForDisbursement provides a mock function with given fields: ctx, loanID
func (_m *LoanRepository) GetLoanForDisbursement(ctx context.Context, loanID uuid.UUID) (*models.Loan, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanForDisbursement")
	}

	var r0 *models.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Loan, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Loan); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
