// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/fajar-andriansyah/loan-engine/models"
	mock "github.com/stretchr/testify/mock"
)

// PDFGenerator is an autogenerated mock type for the PDFGenerator type
type PDFGenerator struct {
	mock.Mock
}

// GenerateInvestmentAgreement provides a mock function with given fields: investment, loan, investorName
func (_m *PDFGenerator) GenerateInvestmentAgreement(investment *models.Investment, loan *models.LoanInvestmentInfo, investorName string) (string, error) {
	ret := _m.Called(investment, loan, investorName)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInvestmentAgreement")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Investment, *models.LoanInvestmentInfo, string) (string, error)); ok {
		return rf(investment, loan, investorName)
	}
	if rf, ok := ret.Get(0).(func(*models.Investment, *models.LoanInvestmentInfo, string) string); ok {
		r0 = rf(investment, loan, investorName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.Investment, *models.LoanInvestmentInfo, string) error); ok {
		r1 = rf(investment, loan, investorName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateLoanAgreement provides a mock function with given fields: loan
func (_m *PDFGenerator) GenerateLoanAgreement(loan *models.LoanForApproval) (string, error) {
	ret := _m.Called(loan)

	if len(ret) == 0 {
		panic("no return value specified for GenerateLoanAgreement")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.LoanForApproval) (string, error)); ok {
		return rf(loan)
	}
	if rf, ok := ret.Get(0).(func(*models.LoanForApproval) string); ok {
		r0 = rf(loan)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.LoanForApproval) error); ok {
		r1 = rf(loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPDFGenerator creates a new instance of PDFGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPDFGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PDFGenerator {
	mock := &PDFGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
