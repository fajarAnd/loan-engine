// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/fajar-andriansyah/loan-engine/internal/app/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// InvestmentRepository is an autogenerated mock type for the InvestmentRepository type
type InvestmentRepository struct {
	mock.Mock
}

// CheckExistingInvestment provides a mock function with given fields: ctx, loanID, investorID
func (_m *InvestmentRepository) CheckExistingInvestment(ctx context.Context, loanID uuid.UUID, investorID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, loanID, investorID)

	if len(ret) == 0 {
		panic("no return value specified for CheckExistingInvestment")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, loanID, investorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, loanID, investorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID, investorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvestment provides a mock function with given fields: ctx, investment
func (_m *InvestmentRepository) CreateInvestment(ctx context.Context, investment *models.Investment) error {
	ret := _m.Called(ctx, investment)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvestment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Investment) error); ok {
		r0 = rf(ctx, investment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInvestorName provides a mock function with given fields: ctx, investorID
func (_m *InvestmentRepository) GetInvestorName(ctx context.Context, investorID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, investorID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestorName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, investorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, investorID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, investorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanForInvestment provides a mock function with given fields: ctx, loanID
func (_m *InvestmentRepository) GetLoanForInvestment(ctx context.Context, loanID uuid.UUID) (*models.LoanInvestmentInfo, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanForInvestment")
	}

	var r0 *models.LoanInvestmentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.LoanInvestmentInfo, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.LoanInvestmentInfo); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoanInvestmentInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalInvestedAmount provides a mock function with given fields: ctx, loanID
func (_m *InvestmentRepository) GetTotalInvestedAmount(ctx context.Context, loanID uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalInvestedAmount")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (float64, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoanState provides a mock function with given fields: ctx, loanID, newState
func (_m *InvestmentRepository) UpdateLoanState(ctx context.Context, loanID uuid.UUID, newState string) error {
	ret := _m.Called(ctx, loanID, newState)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, loanID, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInvestmentRepository creates a new instance of InvestmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvestmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvestmentRepository {
	mock := &InvestmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
